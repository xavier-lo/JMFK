C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE STC_USER
OBJECT MODULE PLACED IN .\Objects\STC_USER.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE STC_USER.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -STC_USER.lst) TABS(2) OBJECT(.\Objects\STC_USER.obj)

line level    source

   1          ////**********************************////
   2          //=================//
   3          //本程序适用于
   4          //用于JMFK-3 刷卡器
   5          //MCU：stc89c55rd+
   6          //晶振：11.0592MHz 震荡周期1.085us
   7          //文件：STC_USER.C
   8          //================//
   9          ////**********************************////
  10          #include <STC_USER.H>
  11          #include <STC_INIT.H>
  12          #include <stc_eeprom.h>
  13          #include <intrins.h>
  14          #include <operate_card.h>
  15          #include <time_sd2200.h>
  16          
  17          #define max_id_amount 7000
  18          #define EEPROM_BASE_ADDR 0x8000
  19          
  20          /*****定义局部字节变量*****///
  21          volatile unsigned char xdata eeprom_data[512];//eeprom扇区缓冲  
  22          unsigned char IC_sector;//用户卡扇区
  23          unsigned char IC_group;//用户卡群号
  24          unsigned char IC_elv;//用户卡梯号
  25          unsigned char xdata open_card_state = 0x00;
  26          
  27          //bit SA1,SA2,SA3;//地址码1 2 3 
  28          
  29          sbit SA1 = P0^3;
  30          sbit SA2 = P0^2;
  31          sbit SA3 = P0^1;
  32          
  33          /***/
  34          
  35          /*****定义局部位变量*****/
  36          sbit T1_SEL = P1^0;
  37          sbit T2_SEL = P1^1;
  38          sbit T3_SEL = P1^2;
  39          sbit T4_SEL = P1^3;
  40          
  41          sbit BEEP = P3^7;//蜂鸣器
  42          /***/
  43          
  44          
  45          /*全局变量定义*/
  46          extern bit delay40ms_ready;
  47          extern bit beep_start;
  48          
  49          volatile bit delay_5s_start = 0;//用户卡有效5s开始
  50          volatile bit delay_5s_stop = 0;//用户卡有效5s结束
  51          volatile bit repeat_bit = 0;//重复读卡计数开始
  52          volatile bit repeat_bit1 = 0;//重复读卡计数开始
  53          volatile bit delay1s_ready = 0;//读取时间周期1s
  54          
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 2   

  55          volatile unsigned char pre_IC_ISN[4];//防止短时间重复读卡 
  56          volatile unsigned char pre_IC_ISN1[4];//防止短时间重复读卡
  57          extern unsigned char t0_count2;
  58          extern unsigned char t0_count4;
  59          extern unsigned char t0_count3;
  60          
  61          /**/
  62          
  63          
  64          /********************************/
  65          /*name:                         */
  66          /*discription:                  */
  67          /*var in:                       */
  68          /*result out:                   */
  69          /********************************/
  70          void action(void)
  71          {
  72   1        unsigned char xdata read_data[53];
  73   1        unsigned int de_count=0;
  74   1        unsigned char function_count = 0;//
  75   1        unsigned char xdata now_date[3],now_time[2];
  76   1      
  77   1      
  78   1        arrayread_overwirte(EEPROM_BASE_ADDR, 9, eeprom_data);//读取短路点数据
  79   1        output_control(eeprom_data);
  80   1        while(1)
  81   1        { 
  82   2          if(delay40ms_ready)
  83   2          {
  84   3            delay40ms_ready = 0;
  85   3            switch(function_count)
  86   3            {
  87   4              case 0://寻管理卡 管理卡统一定义在IC卡0扇区开始
  88   4                operate_managmentcard(read_data);
  89   4                function_count = 1;
  90   4                break;
  91   4              case 1://寻用户卡 用户卡扇区号由用户定义写入到mcu eeprom
  92   4                operate_usercard(read_data,now_date,now_time);
  93   4                function_count = 0;
  94   4                break;
  95   4              default:
  96   4                function_count = 0;
  97   4                break;
  98   4            
  99   4            }
 100   3          }else if(delay1s_ready)
 101   2          {//读时间
 102   3            delay1s_ready = 0;
 103   3            if(read_time(read_data) == 1)
 104   3            {
 105   4              now_date[0] = read_data[0];//年
 106   4              now_date[1] = read_data[1] & 0x1f;//月
 107   4              now_date[2] = read_data[2] & 0x3f;//日
 108   4              now_time[0] = read_data[4] & 0x3f;//时
 109   4              now_time[1] = read_data[5] & 0x7f;//分  
 110   4            }
 111   3          }
 112   2          
 113   2          if(delay_5s_stop)
 114   2          {//用户卡有效结束
 115   3            delay_5s_stop = 0;
 116   3            arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 3   

 117   3            output_control(&eeprom_data[4*0]);    
 118   3          }
 119   2        
 120   2        }
 121   1        
 122   1      }
 123          
 124          
 125          /****************************************/
 126          /*name:check_time                       */
 127          /*discription:检查时间是否有效          */
 128          /*var in:年月日时间（范围时间 现在时间）*/
 129          /*result out:状态                       */
 130          /****************************************/
 131          bit check_time(unsigned char xdata *bg_dt, unsigned char xdata *ed_dt, unsigned char xdata *bg_t0,
 132                          unsigned char xdata *ed_t0,unsigned char xdata *bg_t1, unsigned char xdata *ed_t1,  
 133                          unsigned char xdata *bg_t2,unsigned char xdata *ed_t2,unsigned char *now_dt, unsigned char xdata *
             -now_t)
 134          {
 135   1        unsigned char xdata t_sta = 0xff;
 136   1        unsigned long xdata bg_date,ed_date,now_date;
 137   1        unsigned int xdata bg_time0,bg_time1,bg_time2,ed_time0,ed_time1,ed_time2,now_time;
 138   1        
 139   1        bg_date = (((unsigned long)bg_dt[0] << 16) & 0xff0000) + (((unsigned long)bg_dt[1] << 8) & 0xff00) + bg_d
             -t[2];
 140   1        ed_date = (((unsigned long)ed_dt[0] << 16) & 0xff0000) + (((unsigned long)ed_dt[1] << 8) & 0xff00) + ed_d
             -t[2];
 141   1        now_date = (((unsigned long)now_dt[0] << 16) & 0xff0000) + (((unsigned long)now_dt[1] << 8) & 0xff00) + n
             -ow_dt[2];    
 142   1        
 143   1        //判断日期
 144   1        if((now_date < bg_date) || (now_date > ed_date)) return 0;
 145   1        
 146   1        bg_time0 = ((unsigned int)(bg_t0[0] << 8) & 0xff00) + bg_t0[1];
 147   1        bg_time1 = ((unsigned int)(bg_t1[0] << 8) & 0xff00) + bg_t1[1];
 148   1        bg_time2 = ((unsigned int)(bg_t2[0] << 8) & 0xff00) + bg_t2[1];
 149   1        ed_time0 = ((unsigned int)(ed_t0[0] << 8) & 0xff00) + ed_t0[1];
 150   1        ed_time1 = ((unsigned int)(ed_t1[0] << 8) & 0xff00) + ed_t1[1];
 151   1        ed_time2 = ((unsigned int)(ed_t2[0] << 8) & 0xff00) + ed_t2[1];
 152   1        now_time = ((unsigned int)(now_t[0] << 8) & 0xff00) + now_t[1]; 
 153   1        
 154   1        //判断时间
 155   1        t_sta = 0x00;
 156   1        if((now_time < bg_time0) || (now_time > ed_time0)) t_sta |= 0x01;
 157   1        if((now_time < bg_time1) || (now_time > ed_time1)) t_sta |= 0x02;
 158   1        if((now_time < bg_time2) || (now_time > ed_time2)) t_sta |= 0x04;
 159   1        
 160   1        if(t_sta == 0x07 ) return 0;
 161   1        return 1;
 162   1      }
 163          
 164          
 165          /********************************/
 166          /*name:   seek_eeprom_isn       */
 167          /*discription: 比对isn是否有效  */
 168          /*var in:   isn 需要检查的isn   */
 169          /*result out: 检查状态          */
 170          /********************************/
 171          bit seek_eeprom_isn(unsigned char xdata *isn)
 172          {
 173   1        unsigned int xdata i = 0;
 174   1        unsigned char xdata read_isn[4];
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 4   

 175   1        while(i < max_id_amount)
 176   1        {
 177   2          arrayread_overwirte(EEPROM_BASE_ADDR+0x200 + 4 * i,4,read_isn); 
 178   2          if((isn[0] == read_isn[0]) && (isn[1] == read_isn[1]) && (isn[2] == read_isn[2]) && (isn[3] == read_isn[
             -3]))
 179   2            return 1;
 180   2          i++;
 181   2        }
 182   1        return 0;
 183   1      }
 184          
 185          
 186          /********************************/
 187          /*name: operate_usercard        */
 188          /*discription:用户卡操作        */
 189          /*var in:   rd_da 缓存数据      */
 190          /*var in:   now_dat 实时日期    */
 191          /*var in:   now_tim 实时时间    */
 192          /*result out:                   */
 193          /********************************/
 194          void operate_usercard(unsigned char xdata *rd_da,unsigned char xdata *now_dat, unsigned char xdata *now_ti
             -m)
 195          {
 196   1        unsigned char xdata ii;
 197   1        /*有效开始日期 有效结束日期 有效开始时间0 1 2 有效结束时间0 1 2 有效次数*/
 198   1        unsigned char xdata begin_date[3],end_date[3],begin_time0[2],end_time0[2],begin_time1[2],end_time1[2],beg
             -in_time2[2],end_time2[2];
 199   1        unsigned long xdata valid_count;
 200   1        unsigned char xdata temp_data[53];
 201   1        /*读序列号块*/
 202   1        if(read_card(IC_sector+1,rd_da) == 1)
 203   1        {   
 204   2          if((pre_IC_ISN1[0] != rd_da[0])||(pre_IC_ISN1[1] != rd_da[1])||(pre_IC_ISN1[2] != rd_da[2])||(pre_IC_ISN
             -1[3] != rd_da[3]))
 205   2          {//防止重复读取
 206   3            ii = 0;
 207   3            while(ii<4)
 208   3            {
 209   4              pre_IC_ISN1[ii] = rd_da[ii];
 210   4              ii++;
 211   4            } 
 212   3            repeat_bit1 = 1;//重复刷卡计数开始
 213   3            
 214   3            if(!seek_eeprom_isn(&rd_da[4])) return;//检查isn是否有效 无效直接退出函数
 215   3            ii = 0;
 216   3            while(ii < 3)
 217   3            {//保存有效结束日期
 218   4              begin_date[ii] = ((rd_da[8 + 2 * ii] << 4) & 0xf0) | (rd_da[9 + 2 * ii] & 0x0f);
 219   4              end_date[ii] = ((rd_da[14 + 2 * ii] << 4) & 0xf0) | (rd_da[15 + 2 * ii] & 0x0f);
 220   4              ii++;
 221   4            }
 222   3            ii = 0;
 223   3            while(ii < 2)
 224   3            {//保存有效开始时间012 结束时间012
 225   4              begin_time0[ii] = rd_da[20 + ii];
 226   4              begin_time1[ii] = rd_da[24 + ii];
 227   4              begin_time2[ii] = rd_da[28 + ii];
 228   4              end_time0[ii] = rd_da[22 + ii]; 
 229   4              end_time1[ii] = rd_da[26 + ii];
 230   4              end_time2[ii] = rd_da[30 + ii]; 
 231   4              ii++;
 232   4            }
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 5   

 233   3            
 234   3            //保存有效次数
 235   3            valid_count = (((unsigned long)rd_da[32] << 24) & 0xff000000) + (((unsigned long)rd_da[33] << 16) & 0xf
             -f0000) + (((unsigned long)rd_da[34] << 8) & 0xff00) + rd_da[35];
 236   3            
 237   3            
 238   3            /*检查时间是否有效*/
 239   3            if(check_time(begin_date,end_date,begin_time0,end_time0,begin_time1,end_time1,begin_time2,end_time2,now
             -_dat,now_tim) == 0) return;
 240   3      
 241   3            /*读控制数据块*/
 242   3            if(read_card(IC_sector,rd_da) == 1)
 243   3            {
 244   4              if((rd_da[21] == (((IC_group << 5) & 0xe0)|(IC_elv&0x1f))) ||(rd_da[21] == ((IC_group << 5) & 0xe0)) |
             -| (rd_da[21] == 0))
 245   4              {//群号 梯号相等 或群号相等梯号为0  或群号梯号为0
 246   5      
 247   5                if((rd_da[20] & 0x10) == 0x10)//次卡
 248   5                {
 249   6                  if(valid_count <= 0) return;//次数为0退出
 250   6                  if(read_card(IC_sector+1,temp_data) == 1)
 251   6                  {
 252   7                    valid_count -= 1;
 253   7                    temp_data[32] = (valid_count >> 24) & 0xff;
 254   7                    temp_data[33] = (valid_count >> 16) & 0xff;
 255   7                    temp_data[34] = (valid_count >> 8) & 0xff;
 256   7                    temp_data[35] = valid_count & 0xff;
 257   7                    
 258   7                    if(write_card((IC_sector + 1) * 4 + 1, &temp_data[12]) != 1) return;//未写成功退出
 259   7                    
 260   7                  }else return;//未读成功退出
 261   6                }
 262   5                
 263   5                if((rd_da[20] & 0xe0) == 0)//用户卡 刷卡保持5s              
 264   5                {
 265   6                  /*输出至控制点 短路点*/
 266   6                  arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
 267   6                  ii = 0;
 268   6                  while(ii < 8)
 269   6                  {
 270   7                    rd_da[36 + ii] = rd_da[36 + ii] | eeprom_data[ii];
 271   7                    ii++;
 272   7                  }
 273   6                  output_control(&rd_da[36]);
 274   6                  beep_start = 1;
 275   6                  delay_5s_start = 1;
 276   6                  t0_count3 = 0;
 277   6                  open_card_state = 0x00;//用户卡清零
 278   6                }else if((rd_da[20] & 0xe0) == 0x80)//用户开关卡 刷完即刻反向输出 
 279   5                {
 280   6                  /*输出至控制点 短路点*/
 281   6                  open_card_state = ~open_card_state;
 282   6                  arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
 283   6                  ii = 0;
 284   6                  while(ii < 8)
 285   6                  {
 286   7                    rd_da[36 + ii] = (rd_da[36 + ii] & open_card_state) | eeprom_data[ii];
 287   7                    ii++;
 288   7                  }
 289   6                  output_control(&rd_da[36]);
 290   6                  beep_start = 1;
 291   6                }         
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 6   

 292   5              }     
 293   4            }
 294   3          } 
 295   2        }else
 296   1        {//无卡清掉序列号
 297   2            t0_count4 = 0;
 298   2            repeat_bit1 = 0;
 299   2            pre_IC_ISN1[10]=0;
 300   2            pre_IC_ISN1[1]=0;
 301   2            pre_IC_ISN1[2]=0;
 302   2            pre_IC_ISN1[3]=0;
 303   2        } 
 304   1      
 305   1      }
 306          
 307          
 308          /********************************/
 309          /*name: operate_managmentcard   */
 310          /*discription:管理卡操作        */
 311          /*var in: rd_da 缓存数据        */
 312          /*result out:                   */
 313          /********************************/
 314          void operate_managmentcard(unsigned char xdata *rd_da)
 315          {
 316   1        unsigned int xdata ii,jj,kk;//用于计数
 317   1        unsigned int xdata IC_eeprom_addr,IC_Byte_num;
 318   1        if(read_card(0x00,rd_da) == 1)
 319   1        {
 320   2          if((pre_IC_ISN[0] != rd_da[0])||(pre_IC_ISN[1] != rd_da[1])||(pre_IC_ISN[2] != rd_da[2])||(pre_IC_ISN[3]
             - != rd_da[3]))
 321   2          {//防止重复读取
 322   3            ii = 0;
 323   3            while(ii<4)
 324   3            {
 325   4              pre_IC_ISN[ii] = rd_da[ii];
 326   4              ii++;
 327   4            } 
 328   3            repeat_bit = 1;//重复刷卡计数开始
 329   3            IC_eeprom_addr = ((((unsigned int)rd_da[22] <<8) & 0xff00) | rd_da[23]);//获取需要写入eeprom地址
 330   3            IC_Byte_num = ((((unsigned int)rd_da[24] <<8) & 0xff00) | rd_da[25]);//获取需要写入序列号长度
 331   3            if((rd_da[20] & 0x60) == 0x40)//写管理卡短路点
 332   3            {
 333   4              open_card_state = 0x00;//管理卡清零
 334   4              
 335   4              sectorerase(IC_eeprom_addr);//擦除扇区
 336   4              if(arrywrite_overwrite(IC_eeprom_addr,8,&rd_da[44]) == 1)//写入短路点 
 337   4              {
 338   5                if(!SA1)
 339   5                { //写入群号 梯号 用户卡扇区号                
 340   6                  if(arrywrite_overwrite(IC_eeprom_addr+8,2,&rd_da[26]) == 1)
 341   6                  {
 342   7                    beep_start = 1;
 343   7                  }                     
 344   6                }else
 345   5                    {   
 346   6                      eeprom_data[0] = ((IC_group << 5) & 0xe0)|(IC_elv&0x1f);
 347   6                      eeprom_data[1] = IC_sector;
 348   6                      beep_start = 1;
 349   6                      if(arrywrite_overwrite(IC_eeprom_addr+8,2,eeprom_data) == 1);                       
 350   6                    }         
 351   5                /*输出至短路点*/
 352   5                arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 7   

 353   5                output_control(&eeprom_data[4*0]);
 354   5              }             
 355   4            }
 356   3            if((rd_da[20] & 0x60) == 0x60)//写序列号
 357   3            {
 358   4              open_card_state = 0x00;//管理卡清零
 359   4              
 360   4              /*获取IC卡序列号*/
 361   4              if(IC_Byte_num < 128)//长度必须小于128
 362   4              {
 363   5                jj = IC_Byte_num / 12;
 364   5                if((IC_Byte_num % 12) != 0) jj += 1;
 365   5                ii = 0;         
 366   5                while(ii+1 < jj+1)//从ic卡第2扇区开始读出
 367   5                {
 368   6                  if(read_card(ii + 1,rd_da) != 1)
 369   6                  {//发现某一扇区未读出退出
 370   7                    t0_count2 = 0;
 371   7                    repeat_bit = 0;
 372   7                    pre_IC_ISN[0]=0;
 373   7                    pre_IC_ISN[1]=0;
 374   7                    pre_IC_ISN[2]=0;
 375   7                    pre_IC_ISN[3]=0;  
 376   7                    return ;
 377   7                  }
 378   6                  kk = 0;
 379   6                  while(kk < 48)
 380   6                  {
 381   7                    eeprom_data[48 * ii + kk] = rd_da[4 + kk];
 382   7                    kk++;
 383   7                  }
 384   6                  ii++;
 385   6                }     
 386   5                sectorerase(IC_eeprom_addr);//擦除扇区
 387   5                if(arrywrite_overwrite(IC_eeprom_addr,IC_Byte_num*4,eeprom_data) == 1)
 388   5                {
 389   6                    beep_start = 1;
 390   6                }
 391   5              }
 392   4            }             
 393   3          }
 394   2        }else
 395   1        {//无卡清掉序列号
 396   2            t0_count2 = 0;
 397   2            repeat_bit = 0;
 398   2            pre_IC_ISN[0]=0;
 399   2            pre_IC_ISN[1]=0;
 400   2            pre_IC_ISN[2]=0;
 401   2            pre_IC_ISN[3]=0;  
 402   2        }   
 403   1      }
 404          
 405          
 406          /**********************************************************/
 407          /*name:read_eeprom                                        */
 408          /*discription:开机读取扇区号 群号 梯号 短路点并输出至接口 */
 409          /*var in:                                                 */
 410          /*result out:                                             */
 411          /**********************************************************/
 412          void read_eeprom(void)
 413          {
 414   1        arrayread_overwirte(EEPROM_BASE_ADDR,10,eeprom_data);//
C51 COMPILER V9.56.0.0   STC_USER                                                          08/08/2018 14:56:20 PAGE 8   

 415   1        IC_sector = eeprom_data[9]; //用户卡扇区号
 416   1        IC_group = ((eeprom_data[8] >> 5) & 0x07);//群号
 417   1        IC_elv = (eeprom_data[8] & 0x1f);//梯号
 418   1        output_control(&eeprom_data[4*0]);
 419   1      }
 420          
 421          
 422          
 423          /********************************/
 424          /*name: output_control          */
 425          /*discription:输出控制到74hc373 */
 426          /*var in:da 控制数据 4字节      */
 427          /*result out:                   */
 428          /********************************/
 429          void output_control(unsigned char xdata  *da )
 430          {
 431   1          /*先锁住*/
 432   1          T1_SEL  = 0;
 433   1          T2_SEL  = 0;
 434   1          T3_SEL  = 0;
 435   1          T4_SEL  = 0;
 436   1          /*变化数据1*/
 437   1          T1_SEL  = 1;
 438   1          _nop_();
 439   1          P2  = da[0];
 440   1          T1_SEL  = 0;
 441   1          /*变化数据2*/
 442   1          T2_SEL  = 1;
 443   1          _nop_();  
 444   1          P2  = da[1];
 445   1          T2_SEL  = 0;
 446   1          /*变化数据3*/
 447   1          T3_SEL  = 1;
 448   1          _nop_();
 449   1          P2  = da[2];
 450   1          T3_SEL  = 0;
 451   1          /*变化数据4*/
 452   1          T4_SEL  = 1;
 453   1          _nop_();
 454   1          P2  = da[3];
 455   1          T4_SEL  = 0;  
 456   1      }
 457          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3107    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    513     177
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
