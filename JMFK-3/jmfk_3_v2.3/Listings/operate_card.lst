C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE OPERATE_CARD
OBJECT MODULE PLACED IN .\Objects\operate_card.obj
COMPILER INVOKED BY: J:\Keil_v5\C51\BIN\C51.EXE operate_card.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\operate_card.lst) TABS(2) OBJECT(.\Objects\operate_card.obj)

line level    source

   1          ////**********************************////
   2          //=================//
   3          //本程序适用于
   4          //用于JMFK-3 刷卡器
   5          //MCU：stc89c55rd+
   6          //晶振：29.4912MHz 震荡周期0.4069us 双倍速下载
   7          //文件：operate_card.C
   8          //此文件使用单片机外设串口1
   9          //================//
  10          #include <operate_card.h>
  11          
  12          #define card_delay 12000
  13          
  14          sbit BEEP = P3^7;//蜂鸣器
  15          
  16          sbit TEST = P1^4;
  17          
  18          sbit CardHead_ERR_Lamp = P4^2;
  19          
  20          /**********************************/
  21          /*name:make_verr                  */
  22          /*discription:产生校验            */
  23          /*var in:da0 需要生成的数据列     */
  24          /*result out: da0 生成后的数据列  */
  25          /**********************************/
  26          void make_verr(unsigned char *da0)
  27          {
  28   1        unsigned char i = 0, verr = 0;
  29   1        verr = da0[2];
  30   1        i = 3;
  31   1        while(i <= da0[2]+1)
  32   1        {
  33   2          verr ^= da0[i];
  34   2          i++;
  35   2        }
  36   1        da0[i] = verr;
  37   1      }
  38          
  39          /********************************/
  40          /*name: verrify                 */
  41          /*discription:校验接收数据      */
  42          /*var in:da0 需要校验的数据     */
  43          /*result out:bool 状态          */
  44          /********************************/
  45          bit verrify(unsigned char *da0)
  46          {
  47   1        bit states = 0;
  48   1        unsigned char ver_da = 0, i = 0;
  49   1        if(da0[0] == 0xaa)
  50   1        {
  51   2          if(da0[1] == 0x55)
  52   2          {     
  53   3            i = 3;
  54   3            ver_da = da0[2];
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 2   

  55   3            while(i < da0[2]+3)
  56   3            {
  57   4              ver_da ^= da0[i];//异或校验数据
  58   4              i++;
  59   4            }
  60   3            if(ver_da == 0)//结果为0校验成功
  61   3              states = 1;
  62   3          }   
  63   2        }
  64   1        return states;
  65   1      }
  66          
  67          
  68          /**********************************************/
  69          /*name:seek_card                              */
  70          /*discription:寻卡                            */
  71          /*var in:                                     */
  72          /*result out:recive_da 返回数据 传入必须9字节 */
  73          /**********************************************/
  74          char seek_card(unsigned char *recive_da)
  75          {
  76   1        char state  = 0;
  77   1        unsigned char i = 0;
  78   1        unsigned int recive_count = 0;
  79   1        /*
  80   1        发送寻卡数据到卡头
  81   1        6个字节
  82   1        */
  83   1      
  84   1        recive_da[0]=0xaa;
  85   1        recive_da[1]=0x55;
  86   1        recive_da[2]=0x03;
  87   1        recive_da[3]=0x20;
  88   1        recive_da[4]=0x00;  
  89   1        
  90   1        make_verr(recive_da);//生成校验字
  91   1        i = 0;
  92   1        while(i < 6)//发送
  93   1        {
  94   2          TI = 0;
  95   2          SBUF = recive_da[i];
  96   2          i++;
  97   2          while(!TI); 
  98   2        }
  99   1        RI = 0;
 100   1        REN = 1;
 101   1        i = 0;  
 102   1        
 103   1        while(i < 9)//接收数据最多接收9个字节
 104   1        { 
 105   2          recive_count  = 0;      
 106   2          while(!RI)
 107   2          {
 108   3            recive_count++;
 109   3            if(recive_count>=card_delay)
 110   3            {
 111   4              REN = 0;
 112   4              return state;//超时退出
 113   4            }
 114   3          }
 115   2          recive_da[i] = SBUF;
 116   2          RI  = 0;    
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 3   

 117   2          i++;    
 118   2        }
 119   1        
 120   1        if((verrify(recive_da) == 1)&&(recive_da[2] == 0x06))//校验接收数据
 121   1        {
 122   2            state = 1;//置位成功状态
 123   2            CardHead_ERR_Lamp = 0;
 124   2        }
 125   1        else CardHead_ERR_Lamp = 1;
 126   1        REN = 0;
 127   1        return state;
 128   1      }
 129          
 130          /******************************************/
 131          /*name: write_card                        */
 132          /*discription:写数据到块使用卡头密码      */
 133          /*var in:block 块号                       */
 134          /*var in:da 需要写的数据16字节传入25字节  */
 135          /*result out:state 写卡状态               */
 136          /******************************************/
 137          bit write_card(unsigned char block,unsigned char *da)
 138          {
 139   1        unsigned char i = 0, seek_data[9];
 140   1        unsigned int recive_count = 0 ;
 141   1        bit state = 0 ;
 142   1      
 143   1        /*寻卡*/
 144   1        if(seek_card(seek_data) ==  0)
 145   1        {
 146   2          return state;//无卡退出
 147   2        }
 148   1        
 149   1        /*
 150   1        填充数据到发送区
 151   1        */
 152   1        da[0] = 0xaa;
 153   1        da[1] = 0x55;
 154   1        da[2] = 0x16;
 155   1        da[3] = 0x22;
 156   1        da[4] = 0x02;
 157   1        da[5] = block;
 158   1        da[6] = 0x80;
 159   1        da[7] = 0x00;
 160   1      
 161   1        make_verr(da);//生成校验
 162   1        
 163   1        /* 发送 */
 164   1        i = 0;
 165   1        while(i < 25)
 166   1        {
 167   2          recive_count  = 0;
 168   2          TI = 0;
 169   2          SBUF = da[i];
 170   2          i++;
 171   2          while(!TI)
 172   2          {
 173   3            recive_count++;
 174   3            if(recive_count >= card_delay/6 ) return 0;//超时退出
 175   3          } 
 176   2        } 
 177   1        /*
 178   1        接收返回状态
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 4   

 179   1        */
 180   1        RI = 0;
 181   1        i = 0;
 182   1        REN = 1;
 183   1        while(i < 5)//接收数据最多接收5个字节
 184   1        { 
 185   2          recive_count  = 0;      
 186   2          while(!RI)
 187   2          {
 188   3            recive_count++;
 189   3            if(recive_count>=card_delay) 
 190   3            {
 191   4              REN=0;
 192   4              return state;//超时退出
 193   4            }
 194   3          }
 195   2          da[i] = SBUF;
 196   2          RI  = 0;    
 197   2          i++;
 198   2          
 199   2        }
 200   1        if((verrify(da) == 1)&&(da[3] == 0x22))//校验接收数据
 201   1        {
 202   2            state = 1;//置位成功状态
 203   2        }
 204   1        REN = 0;  
 205   1        return state;
 206   1      }
 207          
 208          
 209          
 210          /********************************/
 211          /*name:read_card_1block         */
 212          /*discription:读出1块数据       */
 213          /*var in:读出16字节 传入21字节  */
 214          /*result out:                   */
 215          /********************************/
 216          bit read_card_1block(unsigned char block,unsigned char *out)
 217          {
 218   1        unsigned char i = 0;
 219   1        unsigned int recive_count1 = 0;
 220   1        unsigned char seek_data[9];
 221   1        bit state = 0 ;
 222   1        /*寻卡*/
 223   1        if(seek_card(seek_data) ==  0)
 224   1        {
 225   2          return state;//无卡退出
 226   2        }
 227   1        /*
 228   1        填充数据到发送区
 229   1        */
 230   1        out[0]  = 0xaa;
 231   1        out[1]  = 0x55;
 232   1        out[2]  = 0x06;
 233   1        out[3]  = 0x21;
 234   1        out[4]  = 0x02;
 235   1        out[5]  = block;
 236   1        out[6]  = 0x80;
 237   1        out[7]  = 0x00; 
 238   1        make_verr(out);//生成校验
 239   1        
 240   1        /*发送*/
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 5   

 241   1        i = 0;
 242   1        while(i < 9)
 243   1        {
 244   2          TI = 0;
 245   2          SBUF = out[i];
 246   2          i++;
 247   2          while(!TI); 
 248   2        } 
 249   1        /*
 250   1        接收返回状态
 251   1        */
 252   1        RI = 0;
 253   1        i = 0;
 254   1        REN = 1;
 255   1        while(i < 21)//接收数据最多接收21个字节
 256   1        { 
 257   2          recive_count1 = 0;      
 258   2          while(!RI)
 259   2          {
 260   3            recive_count1++;
 261   3            if(recive_count1>=card_delay)
 262   3            {
 263   4              REN=0;
 264   4              return state;//超时退出
 265   4            }
 266   3          }
 267   2          out[i] = SBUF;
 268   2          RI  = 0;    
 269   2          i++;
 270   2          
 271   2        }   
 272   1        
 273   1        if((verrify(out) == 1)&&(out[3] == 0x21))//校验接收数据
 274   1        {
 275   2            state = 1;//置位成功状态
 276   2        } 
 277   1        
 278   1        REN = 0;
 279   1        out[0]  = seek_data[4];
 280   1        out[1]  = seek_data[5];
 281   1        out[2]  = seek_data[6];
 282   1        out[3]  = seek_data[7];
 283   1        return state;
 284   1      }
 285          
 286          
 287          
 288          /********************************************/
 289          /*name: read_card                           */
 290          /*discription:读某一块数据                  */
 291          /*var in: sector 扇区号                     */
 292          /*result out: out 读出数据48字节传入53字节  */
 293          /*result out: state 状态                    */
 294          /********************************************/
 295          bit read_card(unsigned char sector, unsigned char *out)
 296          {
 297   1        unsigned char i = 0;
 298   1        unsigned int recive_count1 = 0;
 299   1        unsigned char seek_data[9];
 300   1        bit r_state = 0 ;
 301   1        /*寻卡*/
 302   1        if(seek_card(seek_data) ==  0)
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 6   

 303   1        {
 304   2          return r_state;//无卡退出
 305   2        }
 306   1        
 307   1        /*
 308   1        填充数据到发送区
 309   1        */
 310   1        out[0]  = 0xaa;
 311   1        out[1]  = 0x55;
 312   1        out[2]  = 0x06;
 313   1        out[3]  = 0x21;
 314   1        out[4]  = 0x02;
 315   1        out[5]  = sector*4+2;
 316   1        out[6]  = 0x80;
 317   1        out[7]  = 0x00; 
 318   1        make_verr(out);//生成校验
 319   1        
 320   1        /*发送*/
 321   1        i = 0;
 322   1        while(i < 9)
 323   1        {
 324   2          TI = 0;
 325   2          SBUF = out[i];
 326   2          i++;
 327   2          while(!TI); 
 328   2        } 
 329   1        /*
 330   1        接收返回状态
 331   1        */
 332   1        RI = 0;
 333   1        i = 0;
 334   1        REN = 1;
 335   1        while(i < 21)//接收数据最多接收21个字节
 336   1        { 
 337   2          recive_count1 = 0;      
 338   2          while(!RI)
 339   2          {
 340   3            recive_count1++;
 341   3            if(recive_count1>=card_delay)
 342   3            {
 343   4              REN=0;
 344   4              return r_state;//超时退出
 345   4            }
 346   3          }
 347   2          out[i] = SBUF;
 348   2          RI  = 0;    
 349   2          i++;
 350   2          
 351   2        }
 352   1        if((verrify(out) != 1)  ||  (out[3] != 0x21))//校验接收数据
 353   1        {
 354   2          r_state = 0;
 355   2          return r_state;
 356   2        }
 357   1        /*映射到最后16字节*/
 358   1        i = 0;
 359   1        while(i < 16)
 360   1        {
 361   2          out[37 + i] = out[4 + i];
 362   2          i++;
 363   2        }
 364   1        
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 7   

 365   1        /*
 366   1        填充数据到发送区
 367   1        */
 368   1        out[0]  = 0xaa;
 369   1        out[1]  = 0x55;
 370   1        out[2]  = 0x06;
 371   1        out[3]  = 0x21;
 372   1        out[4]  = 0x02;
 373   1        out[5]  = sector*4+1;
 374   1        out[6]  = 0x80;
 375   1        out[7]  = 0x00; 
 376   1        make_verr(out);//生成校验
 377   1        
 378   1        /*发送*/
 379   1        i = 0;
 380   1        while(i < 9)
 381   1        {
 382   2          TI = 0;
 383   2          SBUF = out[i];
 384   2          i++;
 385   2          while(!TI); 
 386   2        } 
 387   1        /*
 388   1        接收返回状态
 389   1        */
 390   1        RI = 0;
 391   1        i = 0;
 392   1        REN = 1;
 393   1        while(i < 21)//接收数据最多接收21个字节
 394   1        { 
 395   2          recive_count1 = 0;      
 396   2          while(!RI)
 397   2          {
 398   3            recive_count1++;
 399   3            if(recive_count1 >= card_delay)
 400   3            {
 401   4              REN=0;
 402   4              return r_state;//超时退出
 403   4            }
 404   3          }
 405   2          out[i] = SBUF;
 406   2          RI  = 0;    
 407   2          i++;
 408   2          
 409   2        }
 410   1      
 411   1        if((verrify(out) != 1)  ||  (out[3] != 0x21))//校验接收数据
 412   1        {
 413   2          r_state = 0;
 414   2          return r_state;
 415   2        }
 416   1        /*映射到中间16字节*/
 417   1        i = 0;
 418   1        while(i < 16)
 419   1        {
 420   2          out[21 + i] = out[4 + i];
 421   2          i++;
 422   2        }
 423   1        
 424   1        /*
 425   1        填充数据到发送区
 426   1        */
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 8   

 427   1        out[0]  = 0xaa;
 428   1        out[1]  = 0x55;
 429   1        out[2]  = 0x06;
 430   1        out[3]  = 0x21;
 431   1        out[4]  = 0x02;
 432   1        out[5]  = sector*4+0;
 433   1        out[6]  = 0x80;
 434   1        out[7]  = 0x00; 
 435   1        make_verr(out);//生成校验
 436   1        
 437   1        /*发送*/
 438   1        i = 0;
 439   1        while(i < 9)
 440   1        {
 441   2          TI = 0;
 442   2          SBUF = out[i];
 443   2          i++;
 444   2          while(!TI); 
 445   2        } 
 446   1        /*
 447   1        接收返回状态
 448   1        */
 449   1        RI = 0;
 450   1        i = 0;
 451   1        REN = 1;
 452   1        while(i < 21)//接收数据最多接收21个字节
 453   1        { 
 454   2          recive_count1 = 0;      
 455   2          while(!RI)
 456   2          {
 457   3            recive_count1++;
 458   3            if(recive_count1>=card_delay)
 459   3            {
 460   4              REN=0;
 461   4              r_state = 0;
 462   4              return r_state;//超时退出
 463   4            }
 464   3          }
 465   2          out[i] = SBUF;
 466   2          RI  = 0;    
 467   2          i++;
 468   2          
 469   2        }   
 470   1        
 471   1        TEST = 1;
 472   1        
 473   1      
 474   1        if((verrify(out) == 1)&&(out[3] == 0x21))//校验接收数据
 475   1        {
 476   2            r_state = 1;//置位成功状态
 477   2        } 
 478   1        
 479   1        REN = 0;
 480   1        out[0]  = seek_data[4];
 481   1        out[1]  = seek_data[5];
 482   1        out[2]  = seek_data[6];
 483   1        out[3]  = seek_data[7];
 484   1        i = 0;
 485   1        while(i < 32)
 486   1        {
 487   2          out[20 + i] =out[21 + i]; 
 488   2          i++;
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 9   

 489   2        } 
 490   1        
 491   1        TEST = 0;
 492   1        return r_state;
 493   1      }
 494          
 495          /********************************/
 496          /*name: read_user_card          */
 497          /*discription:读用户卡          */
 498          /*var in: in 扇区号             */
 499          /*var in: out 传入69个字节      */
 500          /*result out: 读出状态          */
 501          /********************************/
 502          bit read_user_card(unsigned char sector, unsigned char *out)
 503          {
 504   1        unsigned char i = 0;
 505   1        unsigned int recive_count1 = 0;
 506   1        unsigned char seek_data[9];
 507   1        bit r_state = 0 ;
 508   1        /*寻卡*/
 509   1        if(seek_card(seek_data) ==  0)
 510   1        {
 511   2          return r_state;//无卡退出
 512   2        }
 513   1        
 514   1        /*
 515   1        填充数据到发送区
 516   1        */
 517   1        out[0]  = 0xaa;
 518   1        out[1]  = 0x55;
 519   1        out[2]  = 0x06;
 520   1        out[3]  = 0x21;
 521   1        out[4]  = 0x02;
 522   1        out[5]  = (sector + 1) * 4 + 1;
 523   1        out[6]  = 0x80;
 524   1        out[7]  = 0x00; 
 525   1        make_verr(out);//生成校验
 526   1        
 527   1        /*发送*/
 528   1        i = 0;
 529   1        while(i < 9)
 530   1        {
 531   2          TI = 0;
 532   2          SBUF = out[i];
 533   2          i++;
 534   2          while(!TI); 
 535   2        } 
 536   1        /*
 537   1        接收返回状态
 538   1        */
 539   1        RI = 0;
 540   1        i = 0;
 541   1        REN = 1;
 542   1        while(i < 21)//接收数据最多接收21个字节
 543   1        { 
 544   2          recive_count1 = 0;      
 545   2          while(!RI)
 546   2          {
 547   3            recive_count1++;
 548   3            if(recive_count1>=card_delay)
 549   3            {
 550   4              REN=0;
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 10  

 551   4              return r_state;//超时退出
 552   4            }
 553   3          }
 554   2          out[i] = SBUF;
 555   2          RI  = 0;    
 556   2          i++;
 557   2          
 558   2        }
 559   1        if((verrify(out) != 1)  ||  (out[3] != 0x21))//校验接收数据
 560   1        {
 561   2          r_state = 0;
 562   2          return r_state;
 563   2        }
 564   1        /*映射到最后16字节*/
 565   1        i = 0;
 566   1        while(i < 16)
 567   1        {
 568   2          out[53 + i] = out[4 + i];
 569   2          i++;
 570   2        }
 571   1        
 572   1        /*
 573   1        填充数据到发送区
 574   1        */
 575   1        out[0]  = 0xaa;
 576   1        out[1]  = 0x55;
 577   1        out[2]  = 0x06;
 578   1        out[3]  = 0x21;
 579   1        out[4]  = 0x02;
 580   1        out[5]  = (sector + 1) * 4 + 0;
 581   1        out[6]  = 0x80;
 582   1        out[7]  = 0x00; 
 583   1        make_verr(out);//生成校验
 584   1        
 585   1        /*发送*/
 586   1        i = 0;
 587   1        while(i < 9)
 588   1        {
 589   2          TI = 0;
 590   2          SBUF = out[i];
 591   2          i++;
 592   2          while(!TI); 
 593   2        } 
 594   1        /*
 595   1        接收返回状态
 596   1        */
 597   1        RI = 0;
 598   1        i = 0;
 599   1        REN = 1;
 600   1        while(i < 21)//接收数据最多接收21个字节
 601   1        { 
 602   2          recive_count1 = 0;      
 603   2          while(!RI)
 604   2          {
 605   3            recive_count1++;
 606   3            if(recive_count1>=card_delay)
 607   3            {
 608   4              REN=0;
 609   4              return r_state;//超时退出
 610   4            }
 611   3          }
 612   2          out[i] = SBUF;
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 11  

 613   2          RI  = 0;    
 614   2          i++;
 615   2          
 616   2        }
 617   1        if((verrify(out) != 1)  ||  (out[3] != 0x21))//校验接收数据
 618   1        {
 619   2          r_state = 0;
 620   2          return r_state;
 621   2        }
 622   1        /*映射到后16字节*/
 623   1        i = 0;
 624   1        while(i < 16)
 625   1        {
 626   2          out[37 + i] = out[4 + i];
 627   2          i++;
 628   2        } 
 629   1      
 630   1        /*
 631   1        填充数据到发送区
 632   1        */
 633   1        out[0]  = 0xaa;
 634   1        out[1]  = 0x55;
 635   1        out[2]  = 0x06;
 636   1        out[3]  = 0x21;
 637   1        out[4]  = 0x02;
 638   1        out[5]  = sector * 4 + 2;
 639   1        out[6]  = 0x80;
 640   1        out[7]  = 0x00; 
 641   1        make_verr(out);//生成校验
 642   1        
 643   1        /*发送*/
 644   1        i = 0;
 645   1        while(i < 9)
 646   1        {
 647   2          TI = 0;
 648   2          SBUF = out[i];
 649   2          i++;
 650   2          while(!TI); 
 651   2        } 
 652   1        /*
 653   1        接收返回状态
 654   1        */
 655   1        RI = 0;
 656   1        i = 0;
 657   1        REN = 1;
 658   1        while(i < 21)//接收数据最多接收21个字节
 659   1        { 
 660   2          recive_count1 = 0;      
 661   2          while(!RI)
 662   2          {
 663   3            recive_count1++;
 664   3            if(recive_count1>=card_delay)
 665   3            {
 666   4              REN=0;
 667   4              return r_state;//超时退出
 668   4            }
 669   3          }
 670   2          out[i] = SBUF;
 671   2          RI  = 0;    
 672   2          i++;
 673   2          
 674   2        }
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 12  

 675   1        if((verrify(out) != 1)  ||  (out[3] != 0x21))//校验接收数据
 676   1        {
 677   2          r_state = 0;
 678   2          return r_state;
 679   2        }
 680   1        /*映射到最后16字节*/
 681   1        i = 0;
 682   1        while(i < 16)
 683   1        {
 684   2          out[21 + i] = out[4 + i];
 685   2          i++;
 686   2        } 
 687   1      
 688   1        /*
 689   1        填充数据到发送区
 690   1        */
 691   1        out[0]  = 0xaa;
 692   1        out[1]  = 0x55;
 693   1        out[2]  = 0x06;
 694   1        out[3]  = 0x21;
 695   1        out[4]  = 0x02;
 696   1        out[5]  = sector*4+1;
 697   1        out[6]  = 0x80;
 698   1        out[7]  = 0x00; 
 699   1        make_verr(out);//生成校验
 700   1        
 701   1        /*发送*/
 702   1        i = 0;
 703   1        while(i < 9)
 704   1        {
 705   2          TI = 0;
 706   2          SBUF = out[i];
 707   2          i++;
 708   2          while(!TI); 
 709   2        } 
 710   1        /*
 711   1        接收返回状态
 712   1        */
 713   1        RI = 0;
 714   1        i = 0;
 715   1        REN = 1;
 716   1        while(i < 21)//接收数据最多接收21个字节
 717   1        { 
 718   2          recive_count1 = 0;      
 719   2          while(!RI)
 720   2          {
 721   3            recive_count1++;
 722   3            if(recive_count1>=card_delay)
 723   3            {
 724   4              REN=0;
 725   4              r_state = 0;
 726   4              return r_state;//超时退出
 727   4            }
 728   3          }
 729   2          out[i] = SBUF;
 730   2          RI  = 0;    
 731   2          i++;
 732   2          
 733   2        }   
 734   1        
 735   1        TEST = 1;
 736   1        
C51 COMPILER V9.56.0.0   OPERATE_CARD                                                      09/07/2018 12:58:50 PAGE 13  

 737   1      
 738   1        if((verrify(out) == 1)&&(out[3] == 0x21))//校验接收数据
 739   1        {
 740   2            r_state = 1;//置位成功状态
 741   2        } 
 742   1        
 743   1        REN = 0;
 744   1        out[0]  = seek_data[4];
 745   1        out[1]  = seek_data[5];
 746   1        out[2]  = seek_data[6];
 747   1        out[3]  = seek_data[7];
 748   1        i = 0;
 749   1        while(i < 48)
 750   1        {
 751   2          out[20 + i] =out[21 + i]; 
 752   2          i++;
 753   2        } 
 754   1        
 755   1        TEST = 0;
 756   1        return r_state; 
 757   1        
 758   1      }
 759          
 760          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2627    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      78
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
