C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE STC_USER
OBJECT MODULE PLACED IN .\Objects\STC_USER.obj
COMPILER INVOKED BY: J:\Keil_v5\C51\BIN\C51.EXE STC_USER.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -STC_USER.lst) TABS(2) OBJECT(.\Objects\STC_USER.obj)

line level    source

   1          ////**********************************////
   2          //=================//
   3          //本程序适用于
   4          //用于JMFK-3 刷卡器
   5          //MCU：stc89c55rd+
   6          //晶振：29.4912MHz 震荡周期0.4069us 双倍速下载
   7          //文件：STC_USER.C
   8          //================//
   9          ////**********************************////
  10          #include <STC_USER.H>
  11          #include <STC_INIT.H>
  12          #include <stc_eeprom.h>
  13          #include <intrins.h>
  14          #include <operate_card.h>
  15          #include <time_sd2200.h>
  16          
  17          #define max_id_amount 7000  //卡序列号最大数量
  18          #define EEPROM_BASE_ADDR 0x8000 //eeprom基地址 stc89c52rc为 0x2000 stc89c55rd+为 0x8000
  19          
  20          /*****定义局部字节变量*****///
  21          volatile unsigned char xdata eeprom_data[512];//eeprom扇区缓冲  
  22          unsigned char IC_sector;//用户卡扇区
  23          unsigned char IC_group;//用户卡群号
  24          unsigned char IC_elv;//用户卡梯号
  25          unsigned char xdata open_card_state = 0x00;
  26          
  27          //bit SA1,SA2,SA3;//地址码1 2 3 
  28          
  29          sbit SA1 = P0^3;
  30          sbit SA2 = P0^2;
  31          sbit SA3 = P0^1;
  32          
  33          //定义指示灯
  34          sbit Time_ERR_Lamp = P0^0;
  35          sbit Output_Control_Lamp = P4^1;
  36          sbit CardHead_ERR_Lamp = P4^2;
  37          sbit NoID_Lamp = P1^4;
  38          sbit Output_Snappe_Lamp = P4^0;
  39          
  40          
  41          /***/
  42          
  43          /*****定义局部位变量*****/
  44          sbit T1_SEL = P1^0;
  45          sbit T2_SEL = P1^1;
  46          sbit T3_SEL = P1^2;
  47          sbit T4_SEL = P1^3;
  48          
  49          sbit BEEP = P3^7;//蜂鸣器
  50          /***/
  51          
  52          
  53          /*全局变量定义*/
  54          extern bit delay40ms_ready;
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 2   

  55          extern bit beep_start;
  56          extern bit lamp_start;
  57          
  58          volatile bit delay_5s_start = 0;//用户卡有效5s开始
  59          volatile bit delay_5s_stop = 0;//用户卡有效5s结束
  60          volatile bit repeat_bit = 0;//重复读卡计数开始
  61          volatile bit repeat_bit1 = 0;//重复读卡计数开始
  62          volatile bit delay1s_ready = 0;//读取时间周期1s
  63          
  64          volatile unsigned char pre_IC_ISN[4];//防止短时间重复读卡 
  65          volatile unsigned char pre_IC_ISN1[4];//防止短时间重复读卡
  66          extern unsigned char t0_count2;
  67          extern unsigned char t0_count4;
  68          extern unsigned int t0_count3;
  69          extern unsigned int t0_count6;
  70          
  71          /**/
  72          
  73          
  74          /********************************/
  75          /*name:                         */
  76          /*discription:                  */
  77          /*var in:                       */
  78          /*result out:                   */
  79          /********************************/
  80          void action(void)
  81          {
  82   1        unsigned char xdata read_data[53];
  83   1        unsigned char xdata user_card_data[69];
  84   1        unsigned int de_count=0;
  85   1        unsigned char function_count = 0;//
  86   1        unsigned char xdata now_date[3],now_time[2],week;
  87   1        unsigned int i = 0;
  88   1        pre_IC_ISN1[0] = 0;
  89   1        pre_IC_ISN1[1] = 0;
  90   1        pre_IC_ISN1[2] = 0;
  91   1        pre_IC_ISN1[3] = 0; 
  92   1        pre_IC_ISN[0] = 0;
  93   1        pre_IC_ISN[1] = 0;
  94   1        pre_IC_ISN[2] = 0;
  95   1        pre_IC_ISN[3] = 0;    
  96   1      
  97   1        arrayread_overwirte(EEPROM_BASE_ADDR, 9, eeprom_data);//读取短路点数据
  98   1        output_control(eeprom_data);
  99   1        while(1)
 100   1        { 
 101   2          if(delay40ms_ready)
 102   2          {
 103   3            delay40ms_ready = 0;
 104   3            function_count++;
 105   3            if(function_count > 4) function_count = 0;
 106   3            switch(function_count)
 107   3            {
 108   4              case 0://寻管理卡 管理卡统一定义在IC卡0扇区开始
 109   4                operate_managmentcard(read_data,now_date,now_time,week);
 110   4                break;
 111   4              case 2://寻用户卡 用户卡扇区号由用户定义写入到mcu eeprom
 112   4                operate_usercard(user_card_data,now_date,now_time);
 113   4                break;
 114   4            }
 115   3          }else if(delay1s_ready)
 116   2          {//读时间
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 3   

 117   3            delay1s_ready = 0;
 118   3            if(read_time(read_data) == 1)
 119   3            {
 120   4              now_date[0] = read_data[0];//年
 121   4              now_date[1] = read_data[1] & 0x1f;//月
 122   4              now_date[2] = read_data[2] & 0x3f;//日
 123   4              week        = read_data[3] & 0x07;//周
 124   4              now_time[0] = read_data[4] & 0x3f;//时
 125   4              now_time[1] = read_data[5] & 0x7f;//分  
 126   4              Time_ERR_Lamp = 0;
 127   4            }else Time_ERR_Lamp = 1;
 128   3          }
 129   2          
 130   2          arrayread_overwirte(0x8200,512,eeprom_data);
 131   2          while(i < 512)
 132   2          {
 133   3            if(eeprom_data[i] != 0xff) break;
 134   3            i++;
 135   3          }
 136   2          if(i >= 512) NoID_Lamp =1;
 137   2          else NoID_Lamp = 0;
 138   2          
 139   2          if(delay_5s_stop)
 140   2          {//用户卡有效结束
 141   3            delay_5s_stop = 0;
 142   3            arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
 143   3            output_control(&eeprom_data[4*0]);    
 144   3          }
 145   2          
 146   2          WDT_CONTR = 0x3f;//喂狗 
 147   2        }
 148   1        
 149   1      }
 150          
 151          
 152          /****************************************/
 153          /*name:check_time                       */
 154          /*discription:检查时间是否有效          */
 155          /*var in:年月日时间（范围时间 现在时间）*/
 156          /*result out:状态                       */
 157          /****************************************/
 158          bit check_time(unsigned char xdata *bg_dt, unsigned char xdata *ed_dt, unsigned char xdata *bg_t0,
 159                          unsigned char xdata *ed_t0,unsigned char xdata *bg_t1, unsigned char xdata *ed_t1,  
 160                          unsigned char xdata *bg_t2,unsigned char xdata *ed_t2,unsigned char *now_dt, unsigned char xdata *
             -now_t)
 161          {
 162   1        unsigned char xdata t_sta = 0xff;
 163   1        unsigned long xdata bg_date,ed_date,now_date;
 164   1        unsigned int xdata bg_time0,bg_time1,bg_time2,ed_time0,ed_time1,ed_time2,now_time;
 165   1        
 166   1        bg_date = (((unsigned long)bg_dt[0] << 16) & 0xff0000) + (((unsigned long)bg_dt[1] << 8) & 0xff00) + bg_d
             -t[2];
 167   1        ed_date = (((unsigned long)ed_dt[0] << 16) & 0xff0000) + (((unsigned long)ed_dt[1] << 8) & 0xff00) + ed_d
             -t[2];
 168   1        now_date = (((unsigned long)now_dt[0] << 16) & 0xff0000) + (((unsigned long)now_dt[1] << 8) & 0xff00) + n
             -ow_dt[2];    
 169   1        
 170   1        //判断日期
 171   1        if((now_date < bg_date) || (now_date > ed_date)) return 0;
 172   1        
 173   1        bg_time0 = ((unsigned int)(bg_t0[0] << 8) & 0xff00) + bg_t0[1];
 174   1        bg_time1 = ((unsigned int)(bg_t1[0] << 8) & 0xff00) + bg_t1[1];
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 4   

 175   1        bg_time2 = ((unsigned int)(bg_t2[0] << 8) & 0xff00) + bg_t2[1];
 176   1        ed_time0 = ((unsigned int)(ed_t0[0] << 8) & 0xff00) + ed_t0[1];
 177   1        ed_time1 = ((unsigned int)(ed_t1[0] << 8) & 0xff00) + ed_t1[1];
 178   1        ed_time2 = ((unsigned int)(ed_t2[0] << 8) & 0xff00) + ed_t2[1];
 179   1        now_time = ((unsigned int)(now_t[0] << 8) & 0xff00) + now_t[1]; 
 180   1        
 181   1        //判断时间
 182   1        t_sta = 0x00;
 183   1        if((now_time < bg_time0) || (now_time > ed_time0)) t_sta |= 0x01;
 184   1        if((now_time < bg_time1) || (now_time > ed_time1)) t_sta |= 0x02;
 185   1        if((now_time < bg_time2) || (now_time > ed_time2)) t_sta |= 0x04;
 186   1        
 187   1        if(t_sta == 0x07 ) return 0;
 188   1        return 1;
 189   1      }
 190          
 191          
 192          /********************************/
 193          /*name:   seek_eeprom_isn       */
 194          /*discription: 比对isn是否有效  */
 195          /*var in:   isn 需要检查的isn   */
 196          /*result out: 检查状态          */
 197          /********************************/
 198          bit seek_eeprom_isn(unsigned int id_num, unsigned char xdata *isn)
 199          {
 200   1      //  unsigned int xdata i = 0;
 201   1        unsigned char xdata read_isn[4];
 202   1      //  while(i < max_id_amount)
 203   1      //  {
 204   1          arrayread_overwirte(EEPROM_BASE_ADDR + 0x200 + 4 * id_num,4,read_isn);  
 205   1          if((isn[0] == read_isn[0]) && (isn[1] == read_isn[1]) && (isn[2] == read_isn[2]) && (isn[3] == read_isn[
             -3]))
 206   1            return 1;
 207   1      //    i++;
 208   1      //  }
 209   1        return 0;
 210   1      }
 211          
 212          
 213          /********************************/
 214          /*name: operate_usercard        */
 215          /*discription:用户卡操作        */
 216          /*var in:   rd_da 缓存数据      */
 217          /*var in:   now_dat 实时日期    */
 218          /*var in:   now_tim 实时时间    */
 219          /*result out:                   */
 220          /********************************/
 221          void operate_usercard(unsigned char xdata *rd_da,unsigned char xdata *now_dat, unsigned char xdata *now_ti
             -m)
 222          {
 223   1        unsigned char xdata ii;
 224   1        /*有效开始日期 有效结束日期 有效开始时间0 1 2 有效结束时间0 1 2 有效次数*/
 225   1        unsigned char xdata begin_date[3],end_date[3],begin_time0[2],end_time0[2],begin_time1[2],end_time1[2],beg
             -in_time2[2],end_time2[2];
 226   1        unsigned long xdata valid_count;
 227   1        unsigned char xdata temp_data[25];
 228   1        bit test_bit = 0;
 229   1        /*读序列号块*/
 230   1        if(read_user_card(IC_sector,rd_da) == 1)
 231   1        {   
 232   2          if((pre_IC_ISN1[0] != rd_da[36])||(pre_IC_ISN1[1] != rd_da[37])||(pre_IC_ISN1[2] != rd_da[38])||(pre_IC_
             -ISN1[3] != rd_da[39]))
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 5   

 233   2          {//防止重复读取
 234   3            ii = 0;
 235   3            while(ii<4)
 236   3            {
 237   4              pre_IC_ISN1[ii] = rd_da[36 + ii];
 238   4              ii++;
 239   4            } 
 240   3            repeat_bit1 = 1;//重复刷卡计数开始
 241   3            
 242   3            if(!seek_eeprom_isn((((unsigned int)rd_da[6] << 8) & 0xff00) + rd_da[7],&rd_da[36])) return;//检查isn是
             -否有效 无效直接退出函数
 243   3            
 244   3            ii = 0;
 245   3            while(ii < 3)
 246   3            {//保存有效结束日期
 247   4              begin_date[ii] = ((rd_da[40 + 2 * ii] << 4) & 0xf0) | (rd_da[41 + 2 * ii] & 0x0f);
 248   4              end_date[ii] = ((rd_da[46 + 2 * ii] << 4) & 0xf0) | (rd_da[47 + 2 * ii] & 0x0f);
 249   4              ii++;
 250   4            }
 251   3            ii = 0;
 252   3            while(ii < 2)
 253   3            {//保存有效开始时间012 结束时间012
 254   4              begin_time0[ii] = rd_da[52 + ii];
 255   4              begin_time1[ii] = rd_da[56 + ii];
 256   4              begin_time2[ii] = rd_da[60 + ii];
 257   4              end_time0[ii] = rd_da[54 + ii]; 
 258   4              end_time1[ii] = rd_da[58 + ii];
 259   4              end_time2[ii] = rd_da[62 + ii]; 
 260   4              ii++;
 261   4            }
 262   3            //保存有效次数
 263   3            valid_count = (((unsigned long)rd_da[64] << 24) & 0xff000000) + (((unsigned long)rd_da[65] << 16) & 0xf
             -f0000) + (((unsigned long)rd_da[66] << 8) & 0xff00) + rd_da[67];
 264   3      
 265   3            //保存（n + 1）* 4 + 1块数据 
 266   3            ii = 0;
 267   3            while(ii < 16)
 268   3            {
 269   4              temp_data[8 + ii] = rd_da[52 + ii];
 270   4              ii++;
 271   4            }
 272   3      
 273   3            /*检查时间是否有效*/
 274   3            if(check_time(begin_date,end_date,begin_time0,end_time0,begin_time1,end_time1,begin_time2,end_time2,now
             -_dat,now_tim) == 0) return;
 275   3      
 276   3            if((rd_da[5] == (((IC_group << 5) & 0xe0)|(IC_elv&0x1f))) ||(rd_da[5] == ((IC_group << 5) & 0xe0)) || (
             -rd_da[5] == 0))
 277   3            {//群号 梯号相等 或群号相等梯号为0  或群号梯号为0
 278   4      
 279   4              if((rd_da[4] & 0x10) == 0x10)//次卡
 280   4              {
 281   5                if(valid_count <= 0) return;//次数为0退出
 282   5      
 283   5                valid_count -= 1;
 284   5                temp_data[20] = (valid_count >> 24) & 0xff;
 285   5                temp_data[21] = (valid_count >> 16) & 0xff;
 286   5                temp_data[22] = (valid_count >> 8) & 0xff;
 287   5                temp_data[23] = valid_count & 0xff;
 288   5                //次数写回IC卡
 289   5                if(write_card((IC_sector + 1) * 4 + 1, temp_data) != 1) return;//未写成功退出
 290   5              }
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 6   

 291   4              
 292   4              if((rd_da[4] & 0xe0) == 0)//用户卡 刷卡保持5s             
 293   4              {
 294   5                /*输出至控制点 短路点*/
 295   5                arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
 296   5                ii = 0;
 297   5                while(ii < 8)
 298   5                {
 299   6                  rd_da[20 + ii] = rd_da[20 + ii] | eeprom_data[ii];
 300   6                  ii++;
 301   6                }
 302   5                output_control(&rd_da[20]);
 303   5                if((rd_da[20] | rd_da[21] | rd_da[22] | rd_da[23]) != 0x00) Output_Control_Lamp = 1;
 304   5                else Output_Control_Lamp = 0;
 305   5                beep_start = 1;
 306   5                lamp_start = 1;
 307   5                delay_5s_start = 1;
 308   5                t0_count3 = 0;
 309   5                t0_count6 = 0;
 310   5                open_card_state = 0x00;//用户卡清零
 311   5              }else if((rd_da[4] & 0xe0) == 0x80)//用户开关卡 刷完即刻反向输出 
 312   4              {
 313   5                /*输出至控制点 短路点*/
 314   5                open_card_state = ~open_card_state;
 315   5                arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
 316   5                ii = 0;
 317   5                while(ii < 8)
 318   5                {
 319   6                  rd_da[20 + ii] = (rd_da[20 + ii] & open_card_state) | eeprom_data[ii];
 320   6                  ii++;
 321   6                }
 322   5                output_control(&rd_da[20]);
 323   5                if((rd_da[20] | rd_da[21] | rd_da[22] | rd_da[23]) != 0x00) Output_Control_Lamp = 1;
 324   5                else Output_Control_Lamp = 0;
 325   5                beep_start = 1;
 326   5                lamp_start = 1;
 327   5                t0_count6 = 0;
 328   5              }         
 329   4            }     
 330   3            
 331   3          } 
 332   2        }else
 333   1        {//无卡清掉序列号
 334   2            t0_count4 = 0;
 335   2            repeat_bit1 = 0;
 336   2            pre_IC_ISN1[10]=0;
 337   2            pre_IC_ISN1[1]=0;
 338   2            pre_IC_ISN1[2]=0;
 339   2            pre_IC_ISN1[3]=0;
 340   2        } 
 341   1      
 342   1      }
 343          
 344          
 345          /********************************/
 346          /*name: operate_managmentcard   */
 347          /*discription:管理卡操作        */
 348          /*var in: rd_da 缓存数据        */
 349          /*var in: now_date 日期         */
 350          /*var in: now_time 时间         */
 351          /*result out:                   */
 352          /********************************/
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 7   

 353          void operate_managmentcard(unsigned char xdata *rd_da, unsigned char xdata *now_date, unsigned char xdata 
             -*now_time, unsigned char wk)
 354          {
 355   1        unsigned int xdata ii,jj,kk;//用于计数
 356   1        unsigned int xdata IC_eeprom_addr,IC_Byte_num;
 357   1      
 358   1        if(read_card(0x00,rd_da) == 1)
 359   1        {
 360   2          if((pre_IC_ISN[0] != rd_da[0])||(pre_IC_ISN[1] != rd_da[1])||(pre_IC_ISN[2] != rd_da[2])||(pre_IC_ISN[3]
             - != rd_da[3]))
 361   2          {//防止重复读取
 362   3            ii = 0;
 363   3            while(ii<4)
 364   3            {
 365   4              pre_IC_ISN[ii] = rd_da[ii];
 366   4              ii++;
 367   4            } 
 368   3            repeat_bit = 1;//重复刷卡计数开始
 369   3            IC_eeprom_addr = ((((unsigned int)rd_da[22] <<8) & 0xff00) | rd_da[23]);//获取需要写入eeprom地址
 370   3            IC_Byte_num = ((((unsigned int)rd_da[24] <<8) & 0xff00) | rd_da[25]);//获取需要写入序列号长度
 371   3            if((rd_da[20] & 0x60) == 0x40)//写管理卡短路点
 372   3            {
 373   4              open_card_state = 0x00;//管理卡清零
 374   4              
 375   4              sectorerase(IC_eeprom_addr);//擦除扇区
 376   4              if(arrywrite_overwrite(IC_eeprom_addr,8,&rd_da[44]) == 1)//写入短路点 
 377   4              {
 378   5                if(!SA1)
 379   5                { //写入群号 梯号 用户卡扇区号                
 380   6                  if(arrywrite_overwrite(IC_eeprom_addr+8,2,&rd_da[26]) == 1)
 381   6                  {
 382   7                    beep_start = 1;
 383   7                    lamp_start = 1;
 384   7                    t0_count6 = 0;              
 385   7                  }                     
 386   6                }else
 387   5                    {   
 388   6                      eeprom_data[0] = ((IC_group << 5) & 0xe0)|(IC_elv&0x1f);
 389   6                      eeprom_data[1] = IC_sector;
 390   6                      beep_start = 1;
 391   6                      lamp_start = 1;
 392   6                      t0_count6 = 0;
 393   6                      if(arrywrite_overwrite(IC_eeprom_addr+8,2,eeprom_data) == 1);                       
 394   6                    }         
 395   5                /*输出至短路点*/
 396   5                arrayread_overwirte(EEPROM_BASE_ADDR,8,eeprom_data);//
 397   5                output_control(&eeprom_data[4*0]);
 398   5                if((eeprom_data[0] | eeprom_data[1] | eeprom_data[2] | eeprom_data[3]) != 0x00) Output_Snappe_Lamp = 
             -1;
 399   5                else Output_Snappe_Lamp = 0;
 400   5              }             
 401   4            }
 402   3            if((rd_da[20] & 0x60) == 0x60)//写序列号
 403   3            {
 404   4              open_card_state = 0x00;//管理卡清零
 405   4              
 406   4              /*获取IC卡序列号*/
 407   4              if(IC_Byte_num < 128)//长度必须小于128
 408   4              {
 409   5                jj = IC_Byte_num / 12;
 410   5                if((IC_Byte_num % 12) != 0) jj += 1;
 411   5                ii = 0;         
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 8   

 412   5                while(ii+1 < jj+1)//从ic卡第2扇区开始读出
 413   5                {
 414   6                  if(read_card(ii + 1,rd_da) != 1)
 415   6                  {//发现某一扇区未读出退出
 416   7                    t0_count2 = 0;
 417   7                    repeat_bit = 0;
 418   7                    pre_IC_ISN[0]=0;
 419   7                    pre_IC_ISN[1]=0;
 420   7                    pre_IC_ISN[2]=0;
 421   7                    pre_IC_ISN[3]=0;  
 422   7                    return ;
 423   7                  }
 424   6                  kk = 0;
 425   6                  while(kk < 48)
 426   6                  {
 427   7                    eeprom_data[48 * ii + kk] = rd_da[4 + kk];
 428   7                    kk++;
 429   7                  }
 430   6                  ii++;
 431   6                }     
 432   5                sectorerase(IC_eeprom_addr);//擦除扇区
 433   5                if(arrywrite_overwrite(IC_eeprom_addr,IC_Byte_num*4,eeprom_data) == 1)
 434   5                {
 435   6                    beep_start = 1;
 436   6                    lamp_start = 1;
 437   6                    t0_count6 = 0;
 438   6                }
 439   5              }
 440   4            } 
 441   3            if((rd_da[20] & 0x4c) == 0x48)//读时间芯片时间
 442   3            {
 443   4              rd_da[36] = now_date[0];
 444   4              rd_da[37] = now_date[1];
 445   4              rd_da[38] = now_date[2];
 446   4              rd_da[39] = wk;
 447   4              rd_da[40] = now_time[0];  
 448   4              rd_da[41] = now_time[1];          
 449   4              if(write_card( 0x02, &rd_da[28]) != 1) return;//未写成功退出
 450   4              beep_start = 1;
 451   4              lamp_start = 1;
 452   4              t0_count6 = 0;
 453   4            }
 454   3            if((rd_da[20] & 0x4c) == 0x44)//写时间到时间芯片 
 455   3            {
 456   4              if(set_time(&rd_da[36]) == 1)
 457   4              {
 458   5                beep_start = 1;
 459   5                lamp_start = 1;
 460   5                t0_count6 = 0;        
 461   5              }         
 462   4            }       
 463   3          }
 464   2        }else
 465   1        {//无卡清掉序列号
 466   2            t0_count2 = 0;
 467   2            repeat_bit = 0;
 468   2            pre_IC_ISN[0]=0;
 469   2            pre_IC_ISN[1]=0;
 470   2            pre_IC_ISN[2]=0;
 471   2            pre_IC_ISN[3]=0;  
 472   2        }   
 473   1      }
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 9   

 474          
 475          
 476          /**********************************************************/
 477          /*name:read_eeprom                                        */
 478          /*discription:开机读取扇区号 群号 梯号 短路点并输出至接口 */
 479          /*var in:                                                 */
 480          /*result out:                                             */
 481          /**********************************************************/
 482          void read_eeprom(void)
 483          {
 484   1        arrayread_overwirte(EEPROM_BASE_ADDR,10,eeprom_data);//
 485   1        IC_sector = eeprom_data[9]; //用户卡扇区号
 486   1        IC_group = ((eeprom_data[8] >> 5) & 0x07);//群号
 487   1        IC_elv = (eeprom_data[8] & 0x1f);//梯号
 488   1        output_control(&eeprom_data[4*0]);
 489   1      }
 490          
 491          
 492          
 493          /********************************/
 494          /*name: output_control          */
 495          /*discription:输出控制到74hc373 */
 496          /*var in:da 控制数据 4字节      */
 497          /*result out:                   */
 498          /********************************/
 499          void output_control(unsigned char xdata  *da )
 500          {
 501   1          /*先锁住*/
 502   1          T1_SEL  = 0;
 503   1          T2_SEL  = 0;
 504   1          T3_SEL  = 0;
 505   1          T4_SEL  = 0;
 506   1          /*变化数据1*/
 507   1          P2  = da[0];
 508   1          _nop_();  
 509   1          T1_SEL  = 1;
 510   1          _nop_();
 511   1          T1_SEL  = 0;
 512   1          /*变化数据2*/
 513   1          P2  = da[1];  
 514   1          _nop_();
 515   1          T2_SEL  = 1;
 516   1          _nop_();
 517   1          T2_SEL  = 0;
 518   1          /*变化数据3*/
 519   1          P2  = da[2];
 520   1          _nop_();  
 521   1          T3_SEL  = 1;
 522   1          _nop_();
 523   1          T3_SEL  = 0;
 524   1          /*变化数据4*/
 525   1          P2  = da[3];  
 526   1          _nop_();    
 527   1          T4_SEL  = 1;
 528   1          _nop_();
 529   1          T4_SEL  = 0;  
 530   1      }
 531          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3686    ----
C51 COMPILER V9.56.0.0   STC_USER                                                          09/07/2018 12:58:50 PAGE 10  

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    513     217
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
